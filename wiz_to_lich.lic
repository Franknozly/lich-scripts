=begin

	This here thing here tries to turn Wizard and Stormfront scripts into Lich scripts.

	tillmen@lichproject.org

=end

#fixme: SF scripts starting Lich scripts

unless script.vars[1] and script.vars[1] !~ /^help$/i
	respond
	respond "Usage: ;wiz_to_lich <scriptname.cmd>"
	respond
	exit
end

if File.exists?(script.vars[1])
	file_name = script.vars[1]
elsif File.exists?($script_dir + script.vars[1])
	file_name = $script_dir + script.vars[1]
else
	echo "file does not exist: #{script.vars[1]}"
	exit
end

out_file_name = file_name.sub(/cmd$|wiz$/i, 'lic')

if File.exists?(out_file_name)
	echo "output file already exists: #{out_file_name}"
	exit
end

file = File.open(file_name)
lines = file.readlines.collect { |line| line.chomp }
file.close
file = nil


counter_action = {
	'add'      => '+',
	'sub'      => '-',
	'subtract' => '-',
	'multiply' => '*',
	'divide'   => '/',
	'set'      => ''
}

setvars = Array.new
lines.each { |line|
begin
#	respond line.inspect
	setvars.push($1) if line =~ /[\s\t]*setvariable\s+([^\s\t]+)[\s\t]/i and not setvars.include?($1)
rescue
	respond $!
	respond $!.backtrace[0..1]
	respond line.inspect
	exit
end
}
has_counter = lines.find { |line| line =~ /%c/i }
has_save = lines.find { |line| line =~ /%s/i }
has_nextroom = lines.find { |line| line =~ /nextroom/i }

fixstring = proc { |str|
	while not setvars.empty? and str =~ /%(#{setvars.join('|')})%/io
		str.gsub!('%' + $1 + '%', '#{' + $1.downcase + '}')
	end
	str.gsub!(/%c(?:%)?/i, '#{c}')
	str.gsub!(/%s(?:%)?/i, '#{sav}')
	while str =~ /%([0-9])(?:%)?/
		str.gsub!(/%#{$1}(?:%)?/, '#{script.vars[' + $1 + ']}')
	end
	str
}

fixline = proc { |line|
	if line =~ /^[\s\t]*[A-Za-z0-9_\-']+:/i
		line = line.downcase.strip
	elsif line =~ /^([\s\t]*)counter\s+(add|sub|subtract|divide|multiply|set)\s+([0-9]+)/i
		line = "#{$1}c #{counter_action[$2]}= #{$3}"
	elsif line =~ /^([\s\t]*)counter\s+(add|sub|subtract|divide|multiply|set)\s+(.*)/i
		indent, action, arg = $1, $2, $3
		line = "#{indent}c #{counter_action[action]}= #{fixstring.call(arg.inspect)}.to_i"
	elsif line =~ /^([\s\t]*)save[\s\t]+"?(.*?)"?[\s\t]*$/i
		indent, arg = $1, $2
		line = "#{indent}sav = #{fixstring.call(arg.inspect)}"
	elsif line =~ /^([\s\t]*)echo[\s\t]+(.+)/i
		indent, arg = $1, $2
		line = "#{indent}echo #{fixstring.call(arg.inspect)}"
	elsif line =~ /^([\s\t]*)waitfor[\s\t]+(.+)/i
		indent, arg = $1, $2
		line = "#{indent}waitfor #{fixstring.call(Regexp.escape(arg).inspect.gsub("\\\\ ", ' '))}"
	elsif line =~ /^([\s\t]*)(put|move)[\s\t]+(.+)/i
		indent, cmd, arg = $1, $2, $3
		line = "#{indent}waitrt?\n#{indent}clear\n#{indent}#{cmd.downcase} #{fixstring.call(arg.inspect)}"
	elsif line =~ /^([\s\t]*)goto[\s\t]+(.+)/i
		indent, arg = $1, $2
		line = "#{indent}goto #{fixstring.call(arg.inspect).downcase}"
	elsif line =~ /^([\s\t]*)waitforre[\s\t]+(.+)/i
		indent, arg = $1, $2
		line = "#{indent}waitforre #{arg}"
	elsif line =~ /^([\s\t]*)pause[\s\t]*(.*)/i
		indent, arg = $1, $2
		arg = '1' if arg.empty?
		arg = '0'+arg.strip if arg.strip =~ /^\.[0-9]+$/
		line = "#{indent}pause #{arg}"
	elsif line =~ /^([\s\t]*)match[\s\t]+([^\s\t]+)[\s\t]+(.+)/i
		indent, label, arg = $1, $2, $3
		line = "#{indent}match #{fixstring.call(label.inspect).downcase}, #{fixstring.call(Regexp.escape(arg).inspect.gsub("\\\\ ", ' '))}"
	elsif line =~ /^([\s\t]*)matchre[\s\t]+([^\s\t]+)[\s\t]+(.+)/i
		indent, label, regex = $1, $2, $3
		line = "#{indent}matchre #{fixstring.call(label.inspect).downcase}, #{regex}"
	elsif line =~ /^([\s\t]*)setvariable[\s\t]+([^\s\t]+)[\s\t]+(.+)/i
		indent, var, arg = $1, $2, $3
		line = "#{indent}#{var.downcase} = #{fixstring.call(arg.inspect)}"
	elsif line =~ /^([\s\t]*)deletevariable[\s\t]+(.+)/i
		line = "#{$1}#{$2.downcase} = nil"
	elsif line =~ /^([\s\t]*)(wait|nextroom|exit|echo)\b/i
		line = "#{$1}#{$2.downcase}"
	elsif line =~ /^([\s\t]*)matchwait\b/i
		line = "#{$1}matchwait"
	elsif line =~ /^([\s\t]*)if_([0-9])[\s\t]+(.*)/i
		indent, num, stuff = $1, $2, $3
		line = "#{indent}if script.vars[#{num}]\n#{indent}\t#{fixline.call($3)}\n#{indent}end"
	elsif line =~ /^([\s\t]*)shift\b/i
		line = "#{$1}script.vars.shift"
	else
		echo "unknown line: #{line}"
		line = '#' + line
	end
}

lich_block = false

lines.each_index { |idx|
	if lich_block
		if lines[idx] =~ /\}[\s\t]*LICH[\s\t]*$/
			lines[idx] = lines[idx].sub(/\}[\s\t]*LICH[\s\t]*$/, '')
			lich_block = false
		else
			next
		end		
	elsif lines[idx] =~ /^[\s\t]*#|^[\s\t]*$/
		next
	elsif lines[idx] =~ /^[\s\t]*LICH[\s\t]*\{/
		lines[idx] = lines[idx].sub(/LICH[\s\t]*\{/, '')
		if lines[idx] =~ /\}[\s\t]*LICH[\s\t]*$/
			lines[idx] = lines[idx].sub(/\}[\s\t]*LICH[\s\t]*$/, '')
		else
			lich_block = true
		end
	else
		lines[idx] = fixline.call(lines[idx])
	end
}

if has_counter or has_save or has_nextroom
	lines.each_index { |idx|
		next if lines[idx] =~ /^[\s\t]*#/
		lines.insert(idx, '')
		if has_counter
			lines.insert(idx, 'c = 0')
		end
		if has_save
			lines.insert(idx, "before_dying { Settings['sav'] = sav; Settings.save }")
			lines.insert(idx, "sav = Settings['sav'] || String.new")
			lines.insert(idx, "Settings.load")
		end
		if has_nextroom
			lines.insert(idx, "def nextroom\n\troom_count = XMLData.room_count\n\twait_while { room_count == XMLData.room_count }\nend")
		end
		lines.insert(idx, '')
		break
	}
end

File.open(out_file_name, 'w') { |f| f.write(lines.join("\n") + "\n") }
